package com.assignment.RobobankCSP.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.assignment.RobobankCSP.constant.StatusConstants;
import com.assignment.RobobankCSP.model.AppResponse;
import com.assignment.RobobankCSP.model.Record;
import com.assignment.RobobankCSP.parser.CustomerStatementParserService;
import com.assignment.RobobankCSP.services.ValidatorService;

@RestController
@RequestMapping("/")
public class CustomerStatementProcessorController {
	
	@Autowired
	private ValidatorService validatorService;
	
	@Autowired
	private CustomerStatementParserService customerStatementParserService;
	
	

	@PostMapping(value="/processStatement")
	public  AppResponse processStatement(/*@RequestParam("file") MultipartFile multipart*/)  throws Exception{
		AppResponse appResponse = new AppResponse();
		/*if (!multipart.isEmpty()) {
//		if (multipart.getContentType().equalsIgnoreCase(StatusConstants.FILE_TYPE_CSV)) {
		
			File jsonFile = new File(multipart.getOriginalFilename());
			multipart.transferTo(jsonFile);*/
		File file = new File("//Records.json");
			List<Record> extractedRecords = customerStatementParserService.parseStament(file);
			List<Record> errorRecords = new ArrayList<Record>();
			errorRecords.addAll(validatorService.getDuplicateRecords(extractedRecords));
			errorRecords.addAll(validatorService.getEndBalanceErrorRecords(extractedRecords));
			if (!errorRecords.isEmpty()) {
				appResponse.setResponseCode(StatusConstants.HTTP_CODE_SUCCESS);
				appResponse.setResponseMessage(StatusConstants.VALIDATION_ERROR);
				appResponse.setRecords(errorRecords);
			} else {
				appResponse.setResponseCode(StatusConstants.HTTP_CODE_SUCCESS);
				appResponse.setResponseMessage(StatusConstants.VALIDATION_ERROR);
			}
//		} 
		//}*/
		
		
		return appResponse;
		
	}
	
	@GetMapping("/")
	public String testController() {
		
		return "It Works";
	}
	
	@ExceptionHandler(Exception.class)
	public @ResponseBody AppResponse handleException(HttpServletRequest request, Exception ex) {
		AppResponse appResponse = new AppResponse();
		appResponse.setResponseCode(StatusConstants.HTTP_CODE_ERROR);
		appResponse.setResponseMessage(StatusConstants.UNEXPECTED_SERVER_ERROR);
		return appResponse;
	}
}
