package com.assignment.RobobankCSP.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.assignment.RobobankCSP.constant.StatusConstants;
import com.assignment.RobobankCSP.model.AppResponse;
import com.assignment.RobobankCSP.model.Record;
import com.assignment.RobobankCSP.parser.CustomerStatementParserService;
import com.assignment.RobobankCSP.services.ValidatorService;

@RestController
@RequestMapping("/")
public class CustomerStatementProcessorController {
	
	@Autowired
	private ValidatorService validatorService;
	
	@Autowired
	private CustomerStatementParserService customerStatementParserService;
	
	@RequestMapping(value = "/test", method = RequestMethod.GET)
	public @ResponseBody AppResponse test() throws Exception {
		AppResponse appResponse = new AppResponse();
		return appResponse;
	}

	@PostMapping(value="/processStatement", produces = MediaType.APPLICATION_JSON_VALUE)
	public  @ResponseBody AppResponse processStatement(@RequestParam("file") MultipartFile multipart)  throws Exception{
		AppResponse appResponse = new AppResponse();
		if (!multipart.isEmpty()) {
//		if (multipart.getContentType().equalsIgnoreCase(StatusConstants.FILE_TYPE_CSV)) {
		
			File jsonFile = new File(multipart.getOriginalFilename());
			multipart.transferTo(jsonFile);
			List<Record> extractedRecords = customerStatementParserService.parseStament(multipart);
			List<Record> duplicateRecords = new ArrayList<Record>();
			List<Record> endBalanceRecords = new ArrayList<Record>();
			duplicateRecords.addAll(validatorService.getDuplicateRecords(extractedRecords));
			endBalanceRecords.addAll(validatorService.getEndBalanceErrorRecords(extractedRecords));
			if (!duplicateRecords.isEmpty() && endBalanceRecords.isEmpty()) {
				appResponse.setResult(StatusConstants.DUPLICATE_REFERENCE);
				appResponse.setErrorRecords(duplicateRecords);
			} else if (duplicateRecords.isEmpty() && !endBalanceRecords.isEmpty()) {
				appResponse.setResult(StatusConstants.INCORRECT_END_BALANCE);
				appResponse.setErrorRecords(duplicateRecords);
			}  else if (!duplicateRecords.isEmpty() && !endBalanceRecords.isEmpty()) {
				appResponse.setResult(StatusConstants.DUPLICATE_REFERENCE_INCORRECT_END_BALANCE);
				appResponse.setErrorRecords(duplicateRecords);
				appResponse.setErrorRecords(endBalanceRecords);
			}else  {
				appResponse.setResult(StatusConstants.SUCCESSFUL);
			}
//		} 
		}
		
		
		return appResponse;
		
	}
	
	@GetMapping("/")
	public String testController() {
		
		return "It Works";
	}
	
	/*@ExceptionHandler(JSONException.class)
	public @ResponseBody AppResponse handleJSONException(HttpServletRequest request, Exception ex) {
		AppResponse appResponse = new AppResponse();
		appResponse.setResult(StatusConstants.BAD_REQUEST);
		return appResponse;
	}*/
	 
	@ExceptionHandler(Exception.class)
	public @ResponseBody AppResponse handleException(HttpServletRequest request, Exception ex) {
		AppResponse appResponse = new AppResponse();
		appResponse.setResult(StatusConstants.INTERNAL_SERVER_ERROR);
		return appResponse;
	}
}
