package com.assignment.RobobankCSP;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.web.multipart.MultipartFile;

import com.assignment.RobobankCSP.model.ErrorRecords;
import com.assignment.RobobankCSP.model.Record;
import com.assignment.RobobankCSP.parser.CustomerStatementParserService;
import com.assignment.RobobankCSP.parser.CustomerStatementParserServiceimpl;
import com.assignment.RobobankCSP.services.ValidatorService;
import com.assignment.RobobankCSP.services.impl.ValidatorServiceImpl;

@SpringBootTest
class RobobankCspWebAppApplicationTests {

	@Test
	void contextLoads() {
	}
	
	@Test
	public void getDuplicateRecordsTestCaseWithDuplilcate() {
		List<Record> inputList = Arrays.asList(
				new Record(172833, "NL69ABNA0433647324", 66.72, -41.74, "Tickets for Willem Theuß", 24.98),
				new Record(172833, "NL43AEGO0773393871", 16.52, +43.09, "Tickets for Willem Theuß", 59.61));
		ValidatorService validatorServiceImpl = new ValidatorServiceImpl();
		List<ErrorRecords> duplicateRecords = validatorServiceImpl.getDuplicateRecords(inputList);
		assertEquals(inputList.size(), duplicateRecords.size());
	}

	/**
	 * Type : Negative 
	 * scenario : Duplicate check in given Rabobank Customer
	 * Statement
	 */
	@Test
	public void getDuplicateRecordsTestCaseWithOutDuplilcate() {
		List<Record> inputList = Arrays.asList(
				new Record(172823, "NL69ABNA0433647324", 66.72, -41.74, "Tickets for Willem Theuß", 24.98),
				new Record(172833, "NL43AEGO0773393871", 16.52, +43.09, "Tickets for Willem Theuß", 59.61));
		ValidatorService validatorServiceImpl = new ValidatorServiceImpl();
		List<ErrorRecords> duplicateRecords = validatorServiceImpl.getDuplicateRecords(inputList);
		assertEquals(0, duplicateRecords.size());

	}

	/**
	 * Type : Positive 
	 * scenario : EndBalance validation in given Rabobank Customer
	 * Statement
	 */
	@Test
	public void getEndBalanceErrorRecordsTestCaseWithWrongValue() {
		List<Record> inputList = Arrays.asList(
				new Record(172833, "NL69ABNA0433647324", 66.72, -41.74, "Tickets for Willem Theuß", 50.98),
				new Record(172833, "NL43AEGO0773393871", 16.52, +43.09, "Tickets for Willem Theuß", 25.80));
		ValidatorService validatorServiceImpl = new ValidatorServiceImpl();
		List<ErrorRecords> endBalanceErrorRecords = validatorServiceImpl.getEndBalanceErrorRecords(inputList);
		assertEquals(inputList.size(), endBalanceErrorRecords.size());

	}

	/**
	 * Type : Negative 
	 * scenario : EndBalance validation in given Rabobank Customer
	 * Statement
	 */
	@Test
	public void getEndBalanceErrorRecordsTestCaseWithCorrectValue() {
		List<Record> inputList = Arrays.asList(
				new Record(172833, "NL69ABNA0433647324", 66.72, -41.74, "Tickets for Willem Theuß", 108.46),
				new Record(172833, "NL43AEGO0773393871", 16.52, +43.09, "Tickets for Willem Theuß", -26.57));
		ValidatorService validatorServiceImpl = new ValidatorServiceImpl();
		List<ErrorRecords> endBalanceErrorRecords = validatorServiceImpl.getEndBalanceErrorRecords(inputList);
		assertEquals(0, endBalanceErrorRecords.size());
	}

	/**
	 * Type : Positive 
	 * scenario : Processing the input CSV file and extracting
	 * values as POJO object for validation process
	 */
	@Test
	public void extractStatmentFromJsonTestCase() {
		CustomerStatementParserService customerStatementParserService = new CustomerStatementParserServiceimpl();
		File inputFile = new File("Records.json");
		try {
			customerStatementParserService.parseStament((MultipartFile) inputFile);
			assertTrue(true, "Json parsed Successfully");
		} catch (IOException e) {
			Assertions.fail("File processing error!!" + e.getMessage());
			e.printStackTrace();
		} catch (Exception e) {
			Assertions.fail(e.getMessage());
			e.printStackTrace();
		}
	}

}
